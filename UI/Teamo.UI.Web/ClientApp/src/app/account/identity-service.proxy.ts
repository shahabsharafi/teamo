//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IIdentityClient {
    registerUser(registerUserCommand: RegisterUserCommand): Observable<FileResponse>;
    login(loginCommand: LoginCommand): Observable<LoginDto>;
    forgotPassword(forgotPasswordCommand: ForgotPasswordCommand): Observable<ForgotPasswordDto>;
    changePassword(changePasswordCommand: ChangePasswordCommand): Observable<FileResponse>;
}

@Injectable()
export class IdentityClient implements IIdentityClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    registerUser(registerUserCommand: RegisterUserCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Identity/register-user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registerUserCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processRegisterUser(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }

    login(loginCommand: LoginCommand): Observable<LoginDto> {
        let url_ = this.baseUrl + "/api/Identity/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginDto>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<LoginDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = LoginDto.fromJS(resultData200, _mappings);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LoginDto>(null as any);
    }

    forgotPassword(forgotPasswordCommand: ForgotPasswordCommand): Observable<ForgotPasswordDto> {
        let url_ = this.baseUrl + "/api/Identity/forgot-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(forgotPasswordCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processForgotPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processForgotPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ForgotPasswordDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ForgotPasswordDto>;
        }));
    }

    protected processForgotPassword(response: HttpResponseBase): Observable<ForgotPasswordDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = ForgotPasswordDto.fromJS(resultData200, _mappings);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ForgotPasswordDto>(null as any);
    }

    changePassword(changePasswordCommand: ChangePasswordCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Identity/change-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(changePasswordCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(null as any);
    }
}

export class RegisterUserCommand implements IRegisterUserCommand {
    fullName!: string;
    email!: string;
    userName!: string;
    password!: string;

    constructor(data?: IRegisterUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any, _mappings?: any): RegisterUserCommand | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<RegisterUserCommand>(data, _mappings, RegisterUserCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterUserCommand {
    fullName: string;
    email: string;
    userName: string;
    password: string;
}

export class LoginDto implements ILoginDto {
    email!: string;
    userName!: string;
    fullName!: string;
    verificationRequired!: boolean;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.fullName = _data["fullName"];
            this.verificationRequired = _data["verificationRequired"];
        }
    }

    static fromJS(data: any, _mappings?: any): LoginDto | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<LoginDto>(data, _mappings, LoginDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["fullName"] = this.fullName;
        data["verificationRequired"] = this.verificationRequired;
        return data;
    }
}

export interface ILoginDto {
    email: string;
    userName: string;
    fullName: string;
    verificationRequired: boolean;
}

export class LoginCommand implements ILoginCommand {
    email!: string;
    userName!: string;
    password!: string;
    rememberMe!: boolean;
    isTwoFactor!: boolean;
    verificationCode!: string;

    constructor(data?: ILoginCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.rememberMe = _data["rememberMe"];
            this.isTwoFactor = _data["isTwoFactor"];
            this.verificationCode = _data["verificationCode"];
        }
    }

    static fromJS(data: any, _mappings?: any): LoginCommand | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<LoginCommand>(data, _mappings, LoginCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["rememberMe"] = this.rememberMe;
        data["isTwoFactor"] = this.isTwoFactor;
        data["verificationCode"] = this.verificationCode;
        return data;
    }
}

export interface ILoginCommand {
    email: string;
    userName: string;
    password: string;
    rememberMe: boolean;
    isTwoFactor: boolean;
    verificationCode: string;
}

export class ForgotPasswordDto implements IForgotPasswordDto {
    userName!: string;
    verificationRequired!: boolean;
    verificationCode!: string;
    resetToken!: string;

    constructor(data?: IForgotPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.verificationRequired = _data["verificationRequired"];
            this.verificationCode = _data["verificationCode"];
            this.resetToken = _data["resetToken"];
        }
    }

    static fromJS(data: any, _mappings?: any): ForgotPasswordDto | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<ForgotPasswordDto>(data, _mappings, ForgotPasswordDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["verificationRequired"] = this.verificationRequired;
        data["verificationCode"] = this.verificationCode;
        data["resetToken"] = this.resetToken;
        return data;
    }
}

export interface IForgotPasswordDto {
    userName: string;
    verificationRequired: boolean;
    verificationCode: string;
    resetToken: string;
}

export class ForgotPasswordCommand implements IForgotPasswordCommand {
    userNameOrEmail!: string;
    newPassword!: string;
    verificationCode!: string;
    resetToken!: string;

    constructor(data?: IForgotPasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.userNameOrEmail = _data["userNameOrEmail"];
            this.newPassword = _data["newPassword"];
            this.verificationCode = _data["verificationCode"];
            this.resetToken = _data["resetToken"];
        }
    }

    static fromJS(data: any, _mappings?: any): ForgotPasswordCommand | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<ForgotPasswordCommand>(data, _mappings, ForgotPasswordCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmail"] = this.userNameOrEmail;
        data["newPassword"] = this.newPassword;
        data["verificationCode"] = this.verificationCode;
        data["resetToken"] = this.resetToken;
        return data;
    }
}

export interface IForgotPasswordCommand {
    userNameOrEmail: string;
    newPassword: string;
    verificationCode: string;
    resetToken: string;
}

export class ChangePasswordCommand implements IChangePasswordCommand {
    userName!: string;
    oldPassword!: string;
    newPassword!: string;

    constructor(data?: IChangePasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.oldPassword = _data["oldPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any, _mappings?: any): ChangePasswordCommand | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<ChangePasswordCommand>(data, _mappings, ChangePasswordCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["oldPassword"] = this.oldPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IChangePasswordCommand {
    userName: string;
    oldPassword: string;
    newPassword: string;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T | null {
  if (!mappings)
    mappings = [];
  if (!data)
    return null;

  const mappingIndexName = "__mappingIndex";
  if (data[mappingIndexName])
    return <T>mappings[data[mappingIndexName]].target;

  data[mappingIndexName] = mappings.length;

  let result: any = new type();
  mappings.push({ source: data, target: result });
  result.init(data, mappings);
  return result;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}